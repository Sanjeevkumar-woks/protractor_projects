conf.js:
-------
// An example configuration file.
exports.config = {
    directConnect: true,
  
    // Capabilities to be passed to the webdriver instance.
    capabilities: {
      'browserName': 'chrome'
    },
  
    // Framework to use. Jasmine is recommended.
    framework: 'jasmine',
  
    // Spec patterns are relative to the current working directory when
    // protractor is called.
    specs: ['../test/spec.js'],
  
    // Options to be passed to Jasmine.
    jasmineNodeOpts: {
      defaultTimeoutInterval: 30000
    },
    
  onPrepare: function () {
    var jasmineReporters = require('jasmine-reporters');
    jasmine.getEnv().addReporter(new jasmineReporters.JUnitXmlReporter({
      consolidateAll: true,
      savePath: './',
      filePrefix: 'xmlresults'
    }));
    var fs = require('fs-extra');

    fs.emptyDir('screenshots/', function (err) {
      console.log(err);
    });

    jasmine.getEnv().addReporter({
      specDone: function (result) {
        if (result.status == 'failed') {
          browser.getCapabilities().then(function (caps) {
            var browserName = caps.get('browserName');

            browser.takeScreenshot().then(function (png) {
              var stream = fs.createWriteStream('screenshots/' + browserName + '-' + result.fullName + '.png');
              stream.write(new Buffer(png, 'base64'));
              stream.end();
            });
          });
        }
      }
    });
  },

  //HTMLReport called once tests are finished
  onComplete: function () {
    var browserName, browserVersion;
    var capsPromise = browser.getCapabilities();

    capsPromise.then(function (caps) {
      browserName = caps.get('browserName');
      browserVersion = caps.get('version');
      platform = caps.get('platform');

      var HTMLReport = require('protractor-html-reporter-2');

      testConfig = {
        reportTitle: 'Protractor Test Execution Report',
        outputPath: './',
        outputFilename: 'ProtractorTestReport',
        screenshotPath: './screenshots',
        testBrowser: browserName,
        browserVersion: browserVersion,
        modifiedSuiteName: false,
        screenshotsOnlyOnFailure: true,
        testPlatform: platform
      };
      new HTMLReport().from('xmlresults.xml', testConfig);
    });
  }
  };
  
------------------------------------------------------------------

pageobjects.js:
--------------
let xlsx=require("xlsx");

class LoginData
{
    read_data_from_excel_sheet(sheetName,filePath)
    {
        let wbook=xlsx.readFile(filePath);
        let sheet=wbook.Sheets[sheetName];
        return xlsx.utils.sheet_to_json(sheet);
    }
}

module.exports=new LoginData();

---------------------------------------------------------------

spec.js:
-------
let excelData=require("../pageobjects/pageobjects");
describe("HandlingTheRequiredLoginPage",function(){
        browser.waitForAngularEnabled(false);
        let testJsonData=excelData.read_data_from_excel_sheet("Sheet1","C:/Users/USER/Desktop/loginData/loginToExcelData.xlsx");
        browser.get("https://sqa.stackexchange.com/users/login?ssrc=head&returnurl=https%3a%2f%2fsqa.stackexchange.com%2fquestions%2f31223%2fe2e-how-to-test-login-with-fake-data-username-and-password");
        testJsonData.forEach(function(jsonData){
            it("test1",function(){
                let userNameElement=element(by.id("email"));
                let passwordElement=element(by.id("password"));
                userNameElement.clear();
                passwordElement.clear();
                userNameElement.sendKeys(jsonData.UserName);
                passwordElement.sendKeys(jsonData.Password);
                element(by.buttonText("Log in")).click();
                browser.sleep(5000);
            })
        })
})