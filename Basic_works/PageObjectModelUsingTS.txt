->Create a project folder in visual studio code.
->Open the project terminal in visual studio code and execute the below commands.

  To get protractor------------>npm install protractor

  To get typescript-------------->npm install typescript

  Get the Jasminetypes----------->npm install --save-dev @types/jasmine

  HTML Reports---------->npm i protractor-html-reporter-2

  Taking ScreenShots---------->npm i fs-extra

  Jasmine Reports---------->npm i jasmine-reporters

  Get the tsconfig.json File--------->tsc --init

tsconfig.json:
-------------

{
	"compilerOptions": {
	  "target": "es6",
	  "module": "commonjs",
	  "moduleResolution": "node",
	  "inlineSourceMap": true,
	  "declaration": false,
	  "noImplicitAny": false,
	  "outDir": "JSFilesLocation"
	},
	"exclude": [
	  "node_modules"
	]
}
---------------------------------------------------------

->Create three folders as pageobject,conf,tests.
->Create new file in conf folder as conf.js and enter the below conf.js data.
->Create new file in pageobject folder as pageobjects.ts and enter the below   pageobjects.ts data.
->Create new file in tests folder as spec.ts and enter the below spec.ts data.

conf.js:
-------
// An example configuration file.
exports.config = {
    directConnect: true,
  
    // Capabilities to be passed to the webdriver instance.
    capabilities: {
      'browserName': 'chrome'
    },
  
    // Framework to use. Jasmine is recommended.
    framework: 'jasmine',
  
    // Spec patterns are relative to the current working directory when
    // protractor is called.
    specs: ['../JSFilesLocation/PageObjectModel/tests/spec.js'],
  
    // Options to be passed to Jasmine.
    jasmineNodeOpts: {
      defaultTimeoutInterval: 30000
    },
  
    onPrepare: function () {
      var jasmineReporters = require('jasmine-reporters');
      jasmine.getEnv().addReporter(new jasmineReporters.JUnitXmlReporter({
        consolidateAll: true,
        savePath: './',
        filePrefix: 'xmlresults'
      }));
      var fs = require('fs-extra');
  
      fs.emptyDir('screenshots/', function (err) {
        console.log(err);
      });
  
      jasmine.getEnv().addReporter({
        specDone: function (result) {
          if (result.status == 'failed') {
            browser.getCapabilities().then(function (caps) {
              var browserName = caps.get('browserName');
  
              browser.takeScreenshot().then(function (png) {
                var stream = fs.createWriteStream('screenshots/' + browserName + '-' + result.fullName + '.png');
                stream.write(new Buffer(png, 'base64'));
                stream.end();
              });
            });
          }
        }
      });
    },
  
    //HTMLReport called once tests are finished
    onComplete: function () {
      var browserName, browserVersion;
      var capsPromise = browser.getCapabilities();
  
      capsPromise.then(function (caps) {
        browserName = caps.get('browserName');
        browserVersion = caps.get('version');
        platform = caps.get('platform');
  
        var HTMLReport = require('protractor-html-reporter-2');
  
        testConfig = {
          reportTitle: 'Protractor Test Execution Report',
          outputPath: './',
          outputFilename: 'ProtractorTestReport',
          screenshotPath: './screenshots',
          testBrowser: browserName,
          browserVersion: browserVersion,
          modifiedSuiteName: false,
          screenshotsOnlyOnFailure: true,
          testPlatform: platform
        };
        new HTMLReport().from('xmlresults.xml', testConfig);
      });
    }
  };
  
---------------------------------------------------

pageobjects.ts:
--------------
import{browser,element,by} from 'protractor';
export class PageObject
{
    public userNameElement=element(by.id("email"));
    public passwordElement=element(by.id("passwd"));
    public submitLoginButton=element(by.id("SubmitLogin"));
    
    public getUrl(url:string)
    {
        browser.get(url);    
    }

    public setUserName(userName:string)
    {
        this.userNameElement.sendKeys(userName);
    }

    public setPassword(password:any)
    {
        this.passwordElement.sendKeys(password);
    }

    public clickOnTheLoginButton()
    {
        this.submitLoginButton.click();
    }

}

----------------------------------------------

spec.ts:
-------
import{PageObject} from "../pageobjects/pageobjects";
import{browser} from 'protractor';
describe("HandlingThePageObjectModel",function(){
    it("test1",function(){
        browser.waitForAngularEnabled(false);
        let pageObject=new PageObject();
        pageObject.getUrl("http://automationpractice.com/index.php?controller=authentication&back=my-account");
        pageObject.setUserName("tarak");
        pageObject.setPassword("tarak@12345");
        pageObject.clickOnTheLoginButton();
    })
})
-------------------------------------------------------------

->Open the terminal on project folder and execute the command as tsc to convert the .ts files to .js files .
                                                                 ---

->After that, check whether the JSFilesLocation has created or not in the project folder.

->JSFilesLocation has all the .js files which are converted from the .ts files.
                              
->After doing the above step, on the same project terminal execute the command as protractor .\conf\conf.js .
                                                                                  --------------------------

